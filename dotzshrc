# vim: set filetype=zsh:

# Powerlevel10k
export POWERLEVEL9K_MODE='awesome-fontconfig'
export POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
export POWERLEVEL9K_DIR_SHOW_WRITABLE=true

# OH-MY-ZSH
export DISABLE_MAGIC_FUNCTIONS=false
export COMPLETION_WAITING_DOTS=true
export CASE_SENSITIVE=false

# Zsh
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# Antigen
source /usr/share/zsh/share/antigen.zsh
antigen use oh-my-zsh
antigen bundle pip
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle per-directory-history
antigen theme romkatv/powerlevel10k
antigen apply

source /etc/zsh/zshrc

# globals
export DEFAULT_USER=immanuel
export TERMINAL=/usr/bin/wezterm
export EDITOR=nvim
export DIFFPROG=nvimdiff # our thin wrapper around nvim
export CC=/usr/bin/clang
export CXX=/usr/bin/clang++
export ANDROID_HOME=/opt/android-sdk
export PYTHONIOENCODING=utf-8
export GPG_TTY=$(tty) # see https://github.com/keybase/keybase-issues/issues/2798

# PATH
export PATH="$PATH:${HOME}/.local/share/gem/ruby/3.0.0/bin"

# Ninja
export NINJA_STATUS="[%p|%s/%t|%es] "

# GPerfTools
export CPUPROFILE_FREQUENCY=100000

# SSH agent as systemd daemon
if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ];
then
    # Not an SSH session, so set up SSH agent
    export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
fi

setopt ignoreeof # ignore Ctrl+D

# git difftool with 3-way diff
function gdiff() {
    LOCAL=$1
    REMOTE=$2
    BASE=$(git merge-base "${LOCAL}" "${REMOTE}")

    mkdir -p /tmp/gdiff

    if [ $? -ne 0 ]; then
        echo "ERROR: no merge-base found for ${LOCAL} and ${REMOTE}"
        exit 1
    fi

    echo "LOCAL: ${LOCAL}"
    echo "REMOTE: ${REMOTE}"
    echo "BASE: ${BASE}"

    for file in $(git diff --name-only "${LOCAL}" "${REMOTE}"); do
        echo -n "View '${file}' (Y/n/q)? "
        read yn
        case "${yn}" in
            n|N ) continue;;
            q|Q ) break;;
            y|Y ) ;;
            * ) ;;
        esac

        LOCALFILE=$(mktemp "/tmp/gdiff/${file}.LOCAL.XXXX")
        REMOTEFILE=$(mktemp "/tmp/gdiff/${file}.REMOTE.XXXX")
        BASEFILE=$(mktemp "/tmp/gdiff/${file}.BASE.XXXX")

        git cat-file blob "${LOCAL}:${file}"    > "${LOCALFILE}"    2> /dev/null
        git cat-file blob "${REMOTE}:${file}"   > "${REMOTEFILE}"   2> /dev/null
        git cat-file blob "${BASE}:${file}"     > "${BASEFILE}"     2> /dev/null

        nvim -d "${BASEFILE}" "${LOCALFILE}" "${REMOTEFILE}"

        rm "${LOCALFILE}"
        rm "${REMOTEFILE}"
        rm "${BASEFILE}"
    done
}

# Tabbed Zathura
function Tabthura() {
    if [ $# -lt 1 ]; then
        return
    fi

    if [ $# -eq 1 ]; then
        /usr/bin/zathura --fork "$1" >/dev/null 2>&1
        return
    fi

    XID=$(tabbed -d -c -n "Tabthura" 2>/dev/null)
    for file in $@; do
        /usr/bin/zathura --reparent=${XID} --fork "${file}" >/dev/null 2>&1
    done
}
alias zathura='Tabthura'

# Others
alias py='python3'
alias weather='curl -4 www.wttr.in'

function pfind() {
    ps wwup `pgrep "$1"`
}

# Create directory and cd into
function mkcd() {
    mkdir -p "$*"
    cd "$@"
}

# useful `youtube-dl' flags
function ytdl() {
    youtube-dl -v --yes-playlist -o '%(title)s.%(ext)s' -x --audio-quality 0 --audio-format "mp3" --add-metadata --metadata-from-title '%(artist)s - %(title)s' "$@"
}

function pdfmerge() {
    TARGET=$1
    shift
    # to fix the size of the resulting pages use
    # -dDEVICEWIDTHPOINTS=<W> in pixels
    # -dDEVICEHEIGHTPOINTS=<H> in pixels
    # -dPDFFitPage
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$TARGET" "$@"
}

# send notification when program terminates
function notify() {
    $*; notify-send --urgency=critical "Task completed." "Executed '$*'.\nreturn code: $?"
}

# colorize SVN
function svn {
# Skip the color script when running an svn commit.
if [[ "$1" == "ci" ]] || [[ "$1" == "commit" ]] || [[ "$1" == "add" ]];
then
    command svn "$@";
    return;
fi

# For 'svn log' and 'svn diff' pipe output through colordiff
if [[ "x$1" == "xlog" ]];
then
    command svn "$@" -r 0:HEAD | colordiff;
    return;
fi
if [[ "x$1" == "xdiff" ]];
then
    command svn "$@" | colordiff;
    return;
fi

# Pipe svn through awk to colorize its output.
command svn "$@" | awk '
BEGIN {
cpt_c=0;
}
{
    if ($1=="C") {
        cpt_c=cpt_c+1;
        print "\033[31m" $0 "\033[00m"; # Conflicts are displayed in red
    }
else if ($1=="M") {
    print "\033[31m" $0 "\033[00m"; # Modified in red
}
else if ($1=="A") {
    print "\033[32m" $0 "\033[00m"; # Add in green
}
else if ($1=="?") {
    print "\033[36m" $0 "\033[00m"; # New in cyan
}
else if ($1=="D") {
    print "\033[31m" $0 "\033[00m"; # Delete in red
}
else if ($1=="U") {
    print "\033[35m" $0 "\033[00m"; # Updated in light magenta
}
else if ($1=="X") {
    print "\033[33m" $0 "\033[00m"; # No changes in yellow.
}
else if ($1=="At" || $1 == "External") {
    print "\033[33m" $0 "\033[00m"; # Revision numbers in brown.
}
else {
    print $0; # No color, just print the line
}
}
END {
print cpt_c, " conflicts are found.";
}';
}

function pip-update-all()
{
    sudo pip install -U $(pip freeze | awk '{split($0, a, "=="); print a[1]}')
}

function fork()
{
    /usr/bin/setsid --fork ${TERMINAL} start --cwd "$(pwd)" "$@" &>/dev/null
}

function termcolors()
{
    for x in {0..8}; do
        for i in {30..37}; do
            for a in {40..47}; do
                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m ";
            done;
            echo;
        done;
    done;
    echo "";
}

function chpwd()
{
    emulate -L zsh
    if [ -x ".project.zsh" ];
    then
        source ".project.zsh"
    fi
}

function scr()
{
    xrandr --output eDP1 --off
    xrandr --output DP2 --primary --preferred && \
        xrandr --output DP1-2-8 --preferred --right-of DP2 --rotate left && \
        xrandr --output eDP1 --preferred --left-of DP2 && \
        xbacklight -set 75
    RET=$?
    if [ ${RET} -ne 0 ];
    then
        xrandr --output eDP1 --primary --preferred
        xbacklight -set 75
    fi
}

function list-by-storage()
{
    ls -A1 --color=never --classify=never --file-type | xargs -d '\n' du -hs | sort -h | tail -n 10
}


########################################################################################################################
### Erdtree Aliases
########################################################################################################################

alias et=erd
alias l='erd --suppress-size --level 1'
alias ll='erd --suppress-size --level 1 --long'
alias la='erd --suppress-size --level 1 --long --hidden --no-git'
alias lr='erd --suppress-size --level 5' # 5 levels should suffice
alias lar='erd --suppress-size --level 5 --long' # 5 levels should suffice


########################################################################################################################
### Initialize Zoxide
########################################################################################################################
if [ -x "$(which zoxide)" ];
then
    function z () {
      __zoxide_z $@
    }
    eval "$(zoxide init zsh --no-cmd)"
fi
